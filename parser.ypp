%{
	#include <iostream>
	#include <stdlib.h>
    #include "output.hpp"
    #include "structs.h"
    #include "tableStack.h"
	using namespace std;
	using namespace output;
	extern int yylex();
	extern char* yytext;
	extern int yylineno;
	TableStack *symbolTable;
	int yyerror(const char * message);
	string currRetType;
	string currName;
%}

%token <str> BOOL VOID
%token <enumy> ENUM
%token <integer> INT BYTE B
%token <str> TRUE FALSE
%token <str> WHILE RETURN
%token <str> BREAK CONTINUE
%token <str> SC COMMA
%token <str> STRING ID
%token <integer> NUM

%right <str> ASSIGN
%nonassoc NO_ELSE
%nonassoc <str> ELSE
%right <str> IF
%left <str> OR
%left <str> AND
%left <str> EQUALITY
%nonassoc <str> LHSS
%nonassoc <str> RHSS
%left <str> ADDITIVE
%left <str> MUL
%right <str> NOT
%left <str> LPAREN RPAREN LBRACE RBRACE

%%

Program : Enums Funcs { printProductionRule(1); }
    ;

Funcs : %empty { printProductionRule(2); }
    | FuncDecl Funcs { printProductionRule(3); }
    ;

FuncDecl : RetType ID InsertDecl LPAREN Formals RPAREN  LBRACE NewScope Statements RBRACE { printProductionRule(4); }
    ;

InsertDecl : %empty {
                        if (!symbolTable) symbolTable = new TableStack;
                        symbolTable->newVar((string)yytext,
                    }

Enums : %empty { printProductionRule(5); }
    | EnumDecl Enums { printProductionRule(6); }
    ;

EnumDecl : ENUM ID LBRACE EnumeratorList RBRACE SC { printProductionRule(7); }
    ;

RetType : Type { printProductionRule(8); }
    | VOID { currRetType = VOID }
    ;

Formals : %empty { printProductionRule(10); }
    | FormalsList { printProductionRule(11); }
    ;

FormalsList : FormalDecl { printProductionRule(12); }
    | FormalDecl COMMA FormalsList { printProductionRule(13); }
    ;

FormalDecl : Type ID InsertDecl { printProductionRule(14); }
    | EnumType ID { printProductionRule(15); }
    ;

EnumeratorList : Enumerator { printProductionRule(16); }
    | EnumeratorList COMMA Enumerator { printProductionRule(17); }
    ;

Enumerator : ID { printProductionRule(18); }
    ;

Statements : Statement { printProductionRule(19); }
    | Statements Statement { printProductionRule(20); }
    ;

Statement : LBRACE NewScope Statements RBRACE { printProductionRule(21); }
    | Type ID SC { printProductionRule(22); }
    | EnumType ID SC { printProductionRule(23); }
    | EnumDecl { printProductionRule(24); }
    | Type ID ASSIGN Exp SC { printProductionRule(25); }
    | EnumType ID ASSIGN Exp SC { printProductionRule(26); }
    | ID ASSIGN Exp SC { printProductionRule(27); }
    | Call SC { printProductionRule(28); }
    | RETURN SC { printProductionRule(29); }
    | RETURN Exp SC { printProductionRule(30); }
    | IF LPAREN Exp RPAREN Statement %prec NO_ELSE { printProductionRule(31); }
    | IF LPAREN Exp RPAREN Statement ELSE Statement { printProductionRule(32); }
    | WHILE LPAREN Exp RPAREN Statement { printProductionRule(33); }
    | BREAK SC { printProductionRule(34); }
    | CONTINUE SC { printProductionRule(35); }
    ;

NewScope : %empty {
                        if (!symbolTable) symbolTable = new TableStack;
                        symbolTable->newScope();
                   }

Call : ID LPAREN ExpList RPAREN { printProductionRule(36); }
    | ID LPAREN RPAREN { printProductionRule(37); }
    ;

ExpList : Exp { printProductionRule(38); }
    | Exp COMMA ExpList { printProductionRule(39); }
    ;

Type : INT { currRetType = "int"; }
    | BYTE { currRetType = "byte"; }
    | BOOL { currRetType = "bool"; }
    ;

EnumType : ENUM ID { printProductionRule(43); }
    ;

Exp : LPAREN Exp RPAREN { $$.Exp.val = $2.Exp.val;
                          $$.Exp.type = $2.Exp.type; }
    | Exp ADDITIVE Exp { if($2.str == "+")
                             $$.Exp.val = $1.Exp.val + $3.Exp.val;
                         else
                             $$.Exp.val = $1.Exp.val - $3.Exp.val; }
    | Exp MUL Exp { if($2.str == "*")
                        $$.Exp.val = $1.Exp.val * $3.Exp.val;
                    else
                        $$.Exp.val = $1.Exp.val / $3.Exp.val;}
    | ID { $$.Exp.name = $1.str; }
    | Call { printProductionRule(47); }
    | NUM { $$.Exp.val = yylval.value;
            $$.Exp.type = INT; }
    | NUM B { $$.Exp.val = yylval.value;
              $$.Exp.type = BYTE; }
    | STRING { $$.Exp.val = yylval.str;
               $$.Exp.type = STRING;  }
    | TRUE { $$.Exp.val = yylval.value;
             $$.Exp.type = BOOL;  }
    | FALSE { $$.Exp.val = yylval.value;
              $$.Exp.type = BOOL; }
    | NOT Exp { $$.Exp.val = !yylval.value;
                $$.Exp.type = BOOL; }
    | Exp AND Exp { if($1.Exp.isBool() && $3.Exp.isBool()){
                        $$.Exp.val = $1.Exp.val && $3.Exp.val;
                        $$.Exp.type = BOOL:
                  }  else
                        void errorSyn(yylineno);
                  }
    | Exp OR Exp { if($1.Exp.isBool() && $3.Exp.isBool());
                       $$.Exp.val = $1.Exp.val || $3.Exp.val;
                   else
                       errorSyn(yylineno);
                 }
    | Exp EQUALITY Exp { if (($1.Exp.type == INT && $3.Exp.type == INT) || ($1.Exp.type == BYTE && $3.Exp.type == BYTE) {
                            $$.type = BOOL;
                            $$.val = ($1.Exp.val == $3.Exp.val);
                         } else
                            errorSyn(yylineno);
                       }
    | Exp RHSS Exp { if (($1.Exp.type == INT && $3.Exp.type == INT) || ($1.Exp.type == BYTE && $3.Exp.type == BYTE) {
                        $$.type = BOOL;
                        $$.val = ($1.Exp.val == $3.Exp.val);
                     } else
                        errorSyn(yylineno);
                   }
    | Exp LHSS Exp { if (($1.Exp.type == INT && $3.Exp.type == INT) || ($1.Exp.type == BYTE && $3.Exp.type == BYTE) {
                        $$.type = BOOL;
                        $$.val = ($1.Exp.val == $3.Exp.val);
                     } else
                        errorSyn(yylineno);
                   }
    | LPAREN Type RPAREN Exp { printProductionRule(57); }
    ;
%%

int main()
{
	yyparse();
}

int yyerror(const char * message)
{
    if (yylval == 1) errorLex(yylineno);
	else errorSyn(yylineno);
	exit(0);
}
