%{
	#include <iostream>
	#include <stdlib.h>
    #include "output.hpp"
    #include "structs.h"
    #include "tableStack.h"
    #include "semantic.h"
	using namespace std;
	using namespace output;
	extern int yylex();
	extern char* yytext;
	extern int yylineno;
	symbolTable *symbolTable;
	int yyerror(const char * message);
	#define YYSTYPE Types
%}

%union Types{
     int Integer;
     bool Boolean;
     types Type;
     string Str;
     EnumClass EnumClass;
     Call Call;
     Expression Exp;
     NamedExpression NamedExp;
};

%type <exp> Exp
%type <type> Type
%type <funcs> Funcs
%type <funcDecl> FuncDecl
%type <enums> Enums
%type <enumDecl> EnumDecl
%type <retType> RetType
%type <formals> Formals
%type <formalsList> FormalsList
%type <formalDecl> FormalDecl
%type <enumeratorList> EnumeratorList
%type <enumerator> Enumerator
%type <statements> Statements
%type <statement> Statement
%type <call> Call
%type <expList> ExpList
%type <type> Type
%type <enumType> EnumType

%token <str> BOOL VOID
%token <enumClass> ENUM
%token <integer> INT BYTE B
%token <str> TRUE FALSE
%token <str> WHILE RETURN
%token <str> BREAK CONTINUE
%token <str> SC COMMA
%token <str> STRING ID
%token <integer> NUM

%right <str> ASSIGN
%nonassoc NO_ELSE
%nonassoc <str> ELSE
%right <str> IF
%left <str> OR
%left <str> AND
%left <str> EQUALITY
%nonassoc <str> LHSS
%nonassoc <str> RHSS
%left <str> ADDITIVE
%left <str> MUL
%right <str> NOT
%left <str> LPAREN RPAREN LBRACE RBRACE

%%

Program : Enums Funcs { printProductionRule(1); }
    ;

Funcs : %empty { printProductionRule(2); }
    | FuncDecl Funcs { printProductionRule(3); }
    ;

FuncDecl : RetType ID LPAREN Formals RPAREN  LBRACE NewScope Statements RBRACE { printProductionRule(4); }
    ;


Enums : %empty { printProductionRule(5); }
    | EnumDecl Enums { printProductionRule(6); }
    ;

EnumDecl : ENUM ID LBRACE EnumeratorList RBRACE SC {
        semantic::enumdecl($$, $2, $4, yylineno);
    }
    ;

RetType : Type { printProductionRule(8); }
    | VOID { currRetType = VOID }
    ;

Formals : %empty { printProductionRule(10); }
    | FormalsList { printProductionRule(11); }
    ;

FormalsList : FormalDecl { printProductionRule(12); }
    | FormalDecl COMMA FormalsList { printProductionRule(13); }
    ;

FormalDecl : Type ID { printProductionRule(14); }
    | EnumType ID { printProductionRule(15); }
    ;

EnumeratorList : Enumerator { semantic::enumeratorlist($$, $1, yylineno); }
    | EnumeratorList COMMA Enumerator { semantic::enumeratorlist($$, $1, $3, yylineno); }
    ;

Enumerator : ID { printProductionRule(18); }
    ;

Statements : Statement { printProductionRule(19); }
    | Statements Statement { printProductionRule(20); }
    ;

Statement : LBRACE NewScope Statements RBRACE { semantic::block($$, $3, yylineno); }
    | Type ID SC { void semantic::varDecl($$, $1, $2, yylineno); }
    | EnumType ID SC { printProductionRule(23); }
    | EnumDecl { printProductionRule(24); }
    | Type ID ASSIGN Exp SC { printProductionRule(25); }
    | EnumType ID ASSIGN Exp SC { printProductionRule(26); }
    | ID ASSIGN Exp SC { printProductionRule(27); }
    | Call SC { printProductionRule(28); }
    | RETURN SC { printProductionRule(29); }
    | RETURN Exp SC { printProductionRule(30); }
    | IF LPAREN Exp RPAREN Statement %prec NO_ELSE { printProductionRule(31); }
    | IF LPAREN Exp RPAREN Statement ELSE Statement { printProductionRule(32); }
    | WHILE LPAREN Exp RPAREN Statement { printProductionRule(33); }
    | BREAK SC { printProductionRule(34); }
    | CONTINUE SC { printProductionRule(35); }
    ;

NewScope : %empty {
                        if (!symbolTable) symbolTable = new symbolTable;
                        symbolTable->newScope();
                   }

Call : ID LPAREN ExpList RPAREN { semantic::callCreate($$, $1, $3, yylineno); }
    | ID LPAREN RPAREN { semantic::callCreate($$, $1, yylineno); }
    ;

ExpList : Exp { semantic::expList($$, $1); }
    | Exp COMMA ExpList { semantic::expList($$, $3, $1); }
    ;

Type : INT { currRetType = "int"; }
    | BYTE { currRetType = "byte"; }
    | BOOL { currRetType = "bool"; }
    ;

EnumType : ENUM ID { semantic::enumType($$, $2, yylineno); }
    ;

Exp : LPAREN Exp RPAREN { $$.Exp.val = $2.Exp.val;
                          $$.Exp.type = $2.Exp.type;
                          $$.Exp.id = $2.Exp.id; }
    | Exp ADDITIVE Exp { semantic::binop($$, $1, $3, $2.str, yylineno); }
    | Exp MUL Exp { semantic::binop($$, $1, $3, $2.str, yylineno);}
    | ID { $$.Exp.id = $1.str;
           $$.Exp.type = STRING; }
    | Call { semantic::call($$, $1, yylineno); }
    | NUM { $$.Exp.val = yylval.value;
            $$.Exp.type = INT; }
    | NUM B { semantic::bytecheck($$, $1, yylineno); }
    | STRING { $$.Exp.val = yylval.str;
               $$.Exp.type = STRING;  }
    | TRUE { $$.Exp.val = yylval.value;
             $$.Exp.type = BOOL;  }
    | FALSE { $$.Exp.val = yylval.value;
              $$.Exp.type = BOOL; }
    | NOT Exp { semantic::logicop($$, $2, $2, $1.str, yylineno); }
    | Exp AND Exp { semantic::logicop($$, $1, $3, $2.str, yylineno); }
    | Exp OR Exp { semantic::logicop($$, $1, $3, $2.str, yylineno); }
    | Exp EQUALITY Exp { semantic::relop($$, $1, $3, $2.str, yylineno); }
    | Exp RHSS Exp { semantic::relop($$, $1, $3, $2.str, yylineno); }
    | Exp LHSS Exp { semantic::relop($$, $1, $3, $2.str, yylineno); }
    | LPAREN Type RPAREN Exp {  semantic::cast($$, $2, $4, yylineno); }
    ;
%%

int main()
{
	yyparse();
}

int yyerror(const char * message)
{
    if (yylval == 1) errorLex(yylineno);
	else errorSyn(yylineno);
	exit(1);
}
