%{
	#include <iostream>
	#include <stdlib.h>
    #include "output.hpp"
    #include "structs.h"
    #include "tableStack.h"
    #include "semantic.h"
	using namespace std;
	using namespace output;
	extern int yylex();
	extern char* yytext;
	extern int yylineno;
	symbolTable *symbolTable;
	int yyerror(const char * message);
	#define YYSTYPE Types
%}

//TODO Do we need this?
%union Types{
     int Integer;
     bool Boolean;
     types Type;
     string Str;
     EnumClass EnumClass;
     Call Call;
     Expression Exp;
     NamedExpression NamedExp;
};

%type <exp> Exp
%type <type> Type
%type <funcs> Funcs
%type <funcDecl> FuncDecl
%type <enums> Enums
%type <enumDecl> EnumDecl
%type <retType> RetType
%type <formals> Formals
%type <formalsList> FormalsList
%type <formalDecl> FormalDecl
%type <enumeratorList> EnumeratorList
%type <enumerator> Enumerator
%type <statements> Statements
%type <statement> Statement
%type <call> Call
%type <expList> ExpList
%type <type> Type
%type <enumType> EnumType

%token <str> BOOL VOID
%token <enumClass> ENUM
%token <integer> INT BYTE B
%token <str> TRUE FALSE
%token <str> WHILE RETURN
%token <str> BREAK CONTINUE
%token <str> SC COMMA
%token <str> STRING ID
%token <integer> NUM

%right <str> ASSIGN
%nonassoc NO_ELSE
%nonassoc <str> ELSE
%right <str> IF
%left <str> OR
%left <str> AND
%left <str> EQUALITY
%nonassoc <str> LHSS
%nonassoc <str> RHSS
%left <str> ADDITIVE
%left <str> MUL
%right <str> NOT
%left <str> LPAREN RPAREN LBRACE RBRACE

%%

Program : Enums Funcs { printProductionRule(1); }
    ;

Funcs : %empty { printProductionRule(2); }
    | FuncDecl Funcs { printProductionRule(3); }
    ;

FuncDecl : RetType ID LPAREN Formals RPAREN  LBRACE NewScope Statements RBRACE { printProductionRule(4); }
    ;


Enums : %empty { printProductionRule(5); }
    | EnumDecl Enums { printProductionRule(6); }
    ;

EnumDecl : ENUM ID LBRACE EnumeratorList RBRACE SC { semantic::enumdecl($$, $2.str, $4, yylineno); }
    ;

RetType : Type { printProductionRule(8); }
    | VOID { $$.retType.type = VOID; }
    ;

Formals : %empty { printProductionRule(10); }
    | FormalsList { printProductionRule(11); }
    ;

FormalsList : FormalDecl { printProductionRule(12); }
    | FormalDecl COMMA FormalsList { printProductionRule(13); }
    ;

FormalDecl : Type ID { semantic::typeVarDec($$, $1, $2.str, yylineno); }
    | EnumType ID { semantic::enumVarDeck($$, $1, $2.str, yylineno); }
    ;

EnumeratorList : Enumerator { semantic::enumeratorlist($$, $1, yylineno); }
    | EnumeratorList COMMA Enumerator { semantic::enumeratorlist($$, $1, $3, yylineno); }
    ;

Enumerator : ID { $$.enumerator = { .enumName = $1.str; }
    ;

Statements : Statement { $$.statements($1); }
    | Statements Statement { $$.statements($1, $2); }
    ;

Statement : LBRACE NewScope Statements RBRACE { semantic::block($$, $3, yylineno); }
    | Type ID SC { semantic::varDecl($$, $1.str, $2, yylineno); }
    | EnumType ID SC { semantic::varDecl($$, $1.str, $2, yylineno); }
    | EnumDecl { semantic::enumStatement($$, $1); }
    | Type ID ASSIGN Exp SC {  semantic::declAndAssign($$, $1.types, $2.str, $4, yylineno); }
    | EnumType ID ASSIGN Exp SC { semantic::declAndAssign($$, $1, $2.str, $4, yylineno); }
    | ID ASSIGN Exp SC { semantic::assign($$, $1.str, $3, yylineno); }
    | Call SC { $$.Statment.call = $1.call; }
    | RETURN SC { $$.statement.returnType.ret = false; }
    | RETURN Exp SC {
                        $$.statement.returnType.ret = true;
                        $$.statement.returnType.retVal = $2.exp;
                    }
    | IF LPAREN Exp RPAREN Statement %prec NO_ELSE { semantic::ifStatement($$, $3, $5, yylineno); }
    | IF LPAREN Exp RPAREN Statement ELSE Statement { semantic::ifElseStatement($$, $3, $5, $7, yylineno); }
    | WHILE MarkerWhileOn LPAREN Exp RPAREN Statement { semantic::whileStatement($$, $3.exp, $5, yylineno); }
    | BREAK SC { semantic::breakContinue($$, false, yylineno); }
    | CONTINUE SC { semantic::breakContinue($$, true, yylineno); }
    }
    ;

MarkerWhileOn : %empty {
    $$.statement.whileStat.statWhile.code.insideWhile = true;
    }
    ;

NewScope : %empty {
                        if (!symbolTable) symbolTable = new symbolTable;
                        symbolTable->newScope();
    }
    ;

Call : ID LPAREN ExpList RPAREN { semantic::callCreate($$, $1.str, $3, yylineno); }
    | ID LPAREN RPAREN { semantic::callCreate($$, $1.str, yylineno); }
    ;

ExpList : Exp { semantic::expList($$, $1); }
    | Exp COMMA ExpList { semantic::expList($$, $3, $1); }
    ;

Type : INT { $$.type = INT; }
    | BYTE { $$.type = BYTE; }
    | BOOL { $$.type = BOOL; }
    ;

EnumType : ENUM ID { semantic::enumType($$, $2.str, yylineno); }
    ;

Exp : LPAREN Exp RPAREN { $$.Exp.val = $2.Exp.val;
                          $$.Exp.type = $2.Exp.type;
                          $$.Exp.id = $2.Exp.id; }
    | Exp ADDITIVE Exp { semantic::binop($$, $1, $3, $2.str, yylineno); }
    | Exp MUL Exp { semantic::binop($$, $1, $3, $2.str, yylineno);}
    | ID { $$.Exp.id = $1.str;
           $$.Exp.type = STRING; }
    | Call { semantic::call($$, $1, yylineno); }
    | NUM { $$.Exp.val = yylval.value;
            $$.Exp.type = INT; }
    | NUM B { semantic::bytecheck($$, $1, yylineno); }
    | STRING { $$.Exp.val = yylval.str;
               $$.Exp.type = STRING;  }
    | TRUE { $$.Exp.val = yylval.value;
             $$.Exp.type = BOOL;  }
    | FALSE { $$.Exp.val = yylval.value;
              $$.Exp.type = BOOL; }
    | NOT Exp { semantic::logicop($$, $2, $2, $1.str, yylineno); }
    | Exp AND Exp { semantic::logicop($$, $1, $3, $2.str, yylineno); }
    | Exp OR Exp { semantic::logicop($$, $1, $3, $2.str, yylineno); }
    | Exp EQUALITY Exp { semantic::relop($$, $1, $3, $2.str, yylineno); }
    | Exp RHSS Exp { semantic::relop($$, $1, $3, $2.str, yylineno); }
    | Exp LHSS Exp { semantic::relop($$, $1, $3, $2.str, yylineno); }
    | LPAREN Type RPAREN Exp {  semantic::cast($$, $2, $4, yylineno); }
    ;


%%

int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(1);
}
